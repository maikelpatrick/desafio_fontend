{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../views/services/loading.service\";\nexport class LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n    this.activeRequests = 0;\n  }\n  intercept(request, next) {\n    if (this.activeRequests === 0) {\n      this.loadingService.show();\n    }\n    this.activeRequests++;\n    return next.handle(request).pipe(finalize(() => {\n      this.activeRequests--;\n      if (this.activeRequests === 0) {\n        this.loadingService.hide();\n      }\n    }));\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,QAAQ,QAAoB,MAAM;;;AAI3C,OAAM,MAAOC,kBAAkB;EAG7BC,YAAqBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAF3B,mBAAc,GAAG,CAAC;EAE4B;EAEtDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAG,IAAI,CAACC,cAAc,KAAK,CAAC,EAAC;MAC3B,IAAI,CAACJ,cAAc,CAACK,IAAI,EAAE;;IAG5B,IAAI,CAACD,cAAc,EAAE;IAGrB,OAAOD,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9BV,QAAQ,CAAC,MAAK;MACZ,IAAI,CAACO,cAAc,EAAE;MAErB,IAAG,IAAI,CAACA,cAAc,KAAK,CAAC,EAAC;QAC3B,IAAI,CAACJ,cAAc,CAACQ,IAAI,EAAE;;IAE9B,CAAC,CAAE,CACJ;EACH;;AAtBWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAW,SAAlBX,kBAAkB;AAAA","names":["finalize","LoadingInterceptor","constructor","loadingService","intercept","request","next","activeRequests","show","handle","pipe","hide","factory"],"sourceRoot":"","sources":["/home/maikel/git/projetoD/desafio/src/app/interceptor/loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { finalize, Observable } from 'rxjs';\nimport { LoadingService } from '../views/services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n  private activeRequests = 0;\n\n  constructor( private loadingService: LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if(this.activeRequests === 0){\n      this.loadingService.show();\n    }\n\n    this.activeRequests++;\n\n    \n    return next.handle(request).pipe(\n      finalize(() => {\n        this.activeRequests--;\n\n        if(this.activeRequests === 0){\n          this.loadingService.hide();\n        }\n      } )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}